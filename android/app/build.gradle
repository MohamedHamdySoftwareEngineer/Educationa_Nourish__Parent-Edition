plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

android {
    namespace = "com.example.educational_nourish"
    compileSdkVersion rootProject.ext.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID.
        applicationId = "com.example.educational_nourish"
        // Updated to use the SDK versions from rootProject.ext
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode flutter.versionCode
        versionName flutter.versionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }
}

// ─── FORCE API‑33–COMPATIBLE VERSIONS ─────────────────────────────────────────────
configurations.all {
    resolutionStrategy.eachDependency { details ->
        def g = details.requested.group
        def n = details.requested.name

        if (g == "androidx.window" && (n == "window" || n == "window-java")) {
            details.useVersion "1.1.0"
        }
        else if (g == "androidx.fragment" && n == "fragment") {
            details.useVersion "1.6.1"
        }
        else if (g == "androidx.activity" && n == "activity") {
            details.useVersion "1.7.2"
        }
        else if (g == "androidx.lifecycle") {
            // covers lifecycle-livedata, -viewmodel, -runtime, etc.
            details.useVersion "2.6.1"
        }
        else if (g == "androidx.core") {
            // covers core and core-ktx
            details.useVersion "1.10.1"
        }
        else if (g == "androidx.annotation" && n == "annotation-experimental") {
            details.useVersion "1.3.0"
        }
    }
}

flutter {
    source = "../.."
}
